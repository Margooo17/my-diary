---
description: 
globs: 
alwaysApply: false
---
# 日记本项目开发规则

## AI助手自动同步规则

作为AI助手，我必须：
1. 在每次代码修改后，自动执行同步，无需等待用户提醒
2. 同步步骤：
   ```bash
   ./auto-sync.sh  # 自动执行git add、commit和push操作
   ```
3. 同步后主动等待部署完成（1-2分钟）
4. 提醒用户在 https://margooo17.github.io/my-diary/ 查看更新
5. 如果用户没有看到更新，主动建议：
   - 使用强制刷新（Ctrl+Shift+R 或 Cmd+Shift+R）
   - 清除浏览器缓存
   - 等待几分钟后再试

## 部署流程规则

### 测试环境
- 测试网站: https://margooo17.github.io/my-diary/
- 部署分支: main（GitHub Pages 默认从 main 分支部署）
- 测试方法: 在浏览器中访问测试网站并刷新页面

### 代码更新流程
1. 在本地修改代码后：
   ```bash
   # 添加更改
   git add .
   
   # 提交更改（使用语义化提交信息）
   git commit -m "type: 更改描述"
   # type 可以是：
   # - feat: 新功能
   # - fix: 修复bug
   # - style: 样式更改
   # - docs: 文档更新
   # - refactor: 代码重构
   
   # 推送到 main 分支
   git push origin main
   ```

2. 等待部署：
   - GitHub Pages 会自动开始构建和部署
   - 部署过程通常需要 1-3 分钟

3. 验证更改：
   - 访问 https://margooo17.github.io/my-diary/
   - 使用强制刷新（Ctrl+Shift+R 或 Cmd+Shift+R）清除缓存
   - 确认更改是否生效

### 常见问题处理
1. 如果更改没有显示：
   - 确认代码已推送到 main 分支
   - 清除浏览器缓存后强制刷新
   - 检查 GitHub Pages 部署状态

2. 如果部署失败：
   - 检查提交的代码是否有语法错误
   - 查看 GitHub Actions 的构建日志
   - 修复错误后重新提交

### 最佳实践
1. 每次修改代码后立即推送到 main 分支
2. 使用语义化的提交信息
3. 修改后及时在测试网站验证
4. 保持本地代码与远程同步

### 自动化脚本
为简化部署流程，使用以下命令：
```bash
./auto-sync.sh
```
此脚本会自动：
1. 检测文件更改
2. 添加并提交更改
3. 推送到 GitHub
4. 显示同步状态
