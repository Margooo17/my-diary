---
description: 
globs: 
alwaysApply: false
---
好的，让我总结这次的经验教训，以确保以后的同步流程更加顺畅：

1. **分支管理规范**：
   - GitHub Pages 默认从 `main` 分支部署网站
   - 开发时在 `dev` 分支进行修改和测试
   - 确认修改无误后，需要将 `dev` 分支合并到 `main` 分支
   - 合并命令流程：
     ```bash
     git checkout main      # 切换到main分支
     git merge dev         # 合并dev分支的更改
     git push origin main  # 推送到GitHub的main分支
     ```

2. **部署流程**：
   - 代码推送到 `dev` 分支后，不会自动更新网站
   - 必须将更改合并到 `main` 分支才会触发 GitHub Pages 的自动部署
   - 部署后可能需要等待几分钟才能看到更新

3. **测试验证**：
   - 本地测试：在 `dev` 分支完成
   - 线上测试：必须等待合并到 `main` 并部署完成
   - 验证方法：
     - 访问 https://margooo17.github.io/my-diary/
     - 可能需要强制刷新（Ctrl+Shift+R 或 Cmd+Shift+R）
     - 必要时清除浏览器缓存

4. **常见问题处理**：
   - 如果网站没有更新：检查是否已合并到 `main` 分支
   - 如果合并有冲突：先在 `dev` 分支解决冲突
   - 如果部署失败：检查 GitHub Pages 的部署状态

5. **最佳实践**：
   - 每次修改前先确认当前所在分支
   - 重要修改先在 `dev` 分支测试
   - 确认无误后再合并到 `main` 分支
   - 养成查看部署状态的习惯

这样的工作流程可以确保我们的开发和部署更加规范和可靠。您觉得这个总结有什么需要补充的吗？
